/**
 * B2SHARE API
 * EUDAT B2SHARE API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package eudat.b2share;

import eudat.ApiException;
import eudat.b2share.model.Metadata;
import eudat.b2share.model.InlineResponse200;
import eudat.b2share.model.Error;
import eudat.b2share.model.InlineResponse2001;
import java.io.File;
import eudat.b2share.model.InlineResponse201;
import eudat.b2share.model.Deposition;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DepositionApi
 */
public class DepositionApiTest {

    private final DepositionApi api = new DepositionApi();

    
    /**
     * Commits a deposition
     *
     * Commits a deposition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depositionDepositionIdCommitPostTest() throws ApiException {
        String accessToken = null;
        String depositionId = null;
        Metadata metadata = null;
        // InlineResponse200 response = api.depositionDepositionIdCommitPost(accessToken, depositionId, metadata);

        // TODO: test validations
    }
    
    /**
     * Create a new deposition
     *
     * Create a new deposition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depositionDepositionIdFilesGetTest() throws ApiException {
        String accessToken = null;
        String depositionId = null;
        // InlineResponse2001 response = api.depositionDepositionIdFilesGet(accessToken, depositionId);

        // TODO: test validations
    }
    
    /**
     * Create a new deposition
     *
     * Create a new deposition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depositionDepositionIdFilesPostTest() throws ApiException {
        String accessToken = null;
        String depositionId = null;
        File file = null;
        // InlineResponse200 response = api.depositionDepositionIdFilesPost(accessToken, depositionId, file);

        // TODO: test validations
    }
    
    /**
     * Create a new deposition
     *
     * Create a new deposition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depositionsPostTest() throws ApiException {
        String accessToken = null;
        // InlineResponse201 response = api.depositionsPost(accessToken);

        // TODO: test validations
    }
    
    /**
     * List records
     *
     * List all the deposition records, without any filtering. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recordsGetTest() throws ApiException {
        String accessToken = null;
        Double pageSize = null;
        Double pageOffset = null;
        // List<Deposition> response = api.recordsGet(accessToken, pageSize, pageOffset);

        // TODO: test validations
    }
    
}
